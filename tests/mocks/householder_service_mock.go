// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\bjain\serviceNest\interfaces\householder_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "serviceNest/model"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockHouseholderService is a mock of HouseholderService interface.
type MockHouseholderService struct {
	ctrl     *gomock.Controller
	recorder *MockHouseholderServiceMockRecorder
}

// MockHouseholderServiceMockRecorder is the mock recorder for MockHouseholderService.
type MockHouseholderServiceMockRecorder struct {
	mock *MockHouseholderService
}

// NewMockHouseholderService creates a new mock instance.
func NewMockHouseholderService(ctrl *gomock.Controller) *MockHouseholderService {
	mock := &MockHouseholderService{ctrl: ctrl}
	mock.recorder = &MockHouseholderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseholderService) EXPECT() *MockHouseholderServiceMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockHouseholderService) AddReview(providerID, householderID, serviceID, comments string, rating float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", providerID, householderID, serviceID, comments, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockHouseholderServiceMockRecorder) AddReview(providerID, householderID, serviceID, comments, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockHouseholderService)(nil).AddReview), providerID, householderID, serviceID, comments, rating)
}

// ApproveServiceRequest mocks base method.
func (m *MockHouseholderService) ApproveServiceRequest(requestID, providerID, householderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveServiceRequest", requestID, providerID, householderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveServiceRequest indicates an expected call of ApproveServiceRequest.
func (mr *MockHouseholderServiceMockRecorder) ApproveServiceRequest(requestID, providerID, householderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveServiceRequest", reflect.TypeOf((*MockHouseholderService)(nil).ApproveServiceRequest), requestID, providerID, householderID)
}

// CancelAcceptedRequest mocks base method.
func (m *MockHouseholderService) CancelAcceptedRequest(requestID, householderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAcceptedRequest", requestID, householderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAcceptedRequest indicates an expected call of CancelAcceptedRequest.
func (mr *MockHouseholderServiceMockRecorder) CancelAcceptedRequest(requestID, householderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAcceptedRequest", reflect.TypeOf((*MockHouseholderService)(nil).CancelAcceptedRequest), requestID, householderID)
}

// CancelServiceRequest mocks base method.
func (m *MockHouseholderService) CancelServiceRequest(requestID, householderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelServiceRequest", requestID, householderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelServiceRequest indicates an expected call of CancelServiceRequest.
func (mr *MockHouseholderServiceMockRecorder) CancelServiceRequest(requestID, householderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServiceRequest", reflect.TypeOf((*MockHouseholderService)(nil).CancelServiceRequest), requestID, householderID)
}

// GetAvailableServices mocks base method.
func (m *MockHouseholderService) GetAvailableServices() ([]model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableServices")
	ret0, _ := ret[0].([]model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableServices indicates an expected call of GetAvailableServices.
func (mr *MockHouseholderServiceMockRecorder) GetAvailableServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableServices", reflect.TypeOf((*MockHouseholderService)(nil).GetAvailableServices))
}

// GetServicesByCategory mocks base method.
func (m *MockHouseholderService) GetServicesByCategory(category string) ([]model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesByCategory", category)
	ret0, _ := ret[0].([]model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesByCategory indicates an expected call of GetServicesByCategory.
func (mr *MockHouseholderServiceMockRecorder) GetServicesByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesByCategory", reflect.TypeOf((*MockHouseholderService)(nil).GetServicesByCategory), category)
}

// RequestService mocks base method.
func (m *MockHouseholderService) RequestService(householderID, serviceName string, scheduleTime *time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestService", householderID, serviceName, scheduleTime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestService indicates an expected call of RequestService.
func (mr *MockHouseholderServiceMockRecorder) RequestService(householderID, serviceName, scheduleTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestService", reflect.TypeOf((*MockHouseholderService)(nil).RequestService), householderID, serviceName, scheduleTime)
}

// RescheduleServiceRequest mocks base method.
func (m *MockHouseholderService) RescheduleServiceRequest(requestID string, newTime time.Time, householderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleServiceRequest", requestID, newTime, householderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescheduleServiceRequest indicates an expected call of RescheduleServiceRequest.
func (mr *MockHouseholderServiceMockRecorder) RescheduleServiceRequest(requestID, newTime, householderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleServiceRequest", reflect.TypeOf((*MockHouseholderService)(nil).RescheduleServiceRequest), requestID, newTime, householderID)
}

// SearchService mocks base method.
func (m *MockHouseholderService) SearchService(householder *model.Householder, serviceType string) ([]model.ServiceProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchService", householder, serviceType)
	ret0, _ := ret[0].([]model.ServiceProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchService indicates an expected call of SearchService.
func (mr *MockHouseholderServiceMockRecorder) SearchService(householder, serviceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchService", reflect.TypeOf((*MockHouseholderService)(nil).SearchService), householder, serviceType)
}

// ViewApprovedRequests mocks base method.
func (m *MockHouseholderService) ViewApprovedRequests(householderID string) ([]model.ServiceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewApprovedRequests", householderID)
	ret0, _ := ret[0].([]model.ServiceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewApprovedRequests indicates an expected call of ViewApprovedRequests.
func (mr *MockHouseholderServiceMockRecorder) ViewApprovedRequests(householderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewApprovedRequests", reflect.TypeOf((*MockHouseholderService)(nil).ViewApprovedRequests), householderID)
}

// ViewBookingHistory mocks base method.
func (m *MockHouseholderService) ViewBookingHistory(householderID string) ([]model.ServiceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewBookingHistory", householderID)
	ret0, _ := ret[0].([]model.ServiceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewBookingHistory indicates an expected call of ViewBookingHistory.
func (mr *MockHouseholderServiceMockRecorder) ViewBookingHistory(householderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewBookingHistory", reflect.TypeOf((*MockHouseholderService)(nil).ViewBookingHistory), householderID)
}

// ViewServiceRequestStatus mocks base method.
func (m *MockHouseholderService) ViewServiceRequestStatus(requestID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewServiceRequestStatus", requestID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewServiceRequestStatus indicates an expected call of ViewServiceRequestStatus.
func (mr *MockHouseholderServiceMockRecorder) ViewServiceRequestStatus(requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewServiceRequestStatus", reflect.TypeOf((*MockHouseholderService)(nil).ViewServiceRequestStatus), requestID)
}

// ViewStatus mocks base method.
func (m *MockHouseholderService) ViewStatus(householderID string) ([]model.ServiceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewStatus", householderID)
	ret0, _ := ret[0].([]model.ServiceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewStatus indicates an expected call of ViewStatus.
func (mr *MockHouseholderServiceMockRecorder) ViewStatus(householderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewStatus", reflect.TypeOf((*MockHouseholderService)(nil).ViewStatus), householderID)
}

// isNearby mocks base method.
func (m *MockHouseholderService) isNearby(householder *model.Householder, provider *model.ServiceProvider) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isNearby", householder, provider)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isNearby indicates an expected call of isNearby.
func (mr *MockHouseholderServiceMockRecorder) isNearby(householder, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNearby", reflect.TypeOf((*MockHouseholderService)(nil).isNearby), householder, provider)
}
