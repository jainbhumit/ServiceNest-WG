// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\bjain\serviceNest\interfaces\admin_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "serviceNest/model"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

func (m *MockAdminService) CreateUser(user *model.User) error {
	//TODO implement me
	panic("implement me")
}

func (m *MockAdminService) CheckUserExists(email string) (*model.User, error) {
	//TODO implement me
	panic("implement me")
}

func (m *MockAdminService) UpdateUser(userID string, newEmail, newPassword, newAddress, newPhone *string) error {
	//TODO implement me
	panic("implement me")
}

func (m *MockAdminService) ViewProfileByID(userID string) (*model.User, error) {
	//TODO implement me
	panic("implement me")
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// DeactivateAccount mocks base method.
func (m *MockAdminService) DeactivateAccount(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateAccount", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateAccount indicates an expected call of DeactivateAccount.
func (mr *MockAdminServiceMockRecorder) DeactivateAccount(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateAccount", reflect.TypeOf((*MockAdminService)(nil).DeactivateAccount), userID)
}

// DeleteService mocks base method.
func (m *MockAdminService) DeleteService(serviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockAdminServiceMockRecorder) DeleteService(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockAdminService)(nil).DeleteService), serviceID)
}

// GetAllService mocks base method.
func (m *MockAdminService) GetAllService() ([]model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllService")
	ret0, _ := ret[0].([]model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllService indicates an expected call of GetAllService.
func (mr *MockAdminServiceMockRecorder) GetAllService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllService", reflect.TypeOf((*MockAdminService)(nil).GetAllService))
}

// ViewReports mocks base method.
func (m *MockAdminService) ViewReports() ([]model.ServiceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewReports")
	ret0, _ := ret[0].([]model.ServiceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewReports indicates an expected call of ViewReports.
func (mr *MockAdminServiceMockRecorder) ViewReports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewReports", reflect.TypeOf((*MockAdminService)(nil).ViewReports))
}
