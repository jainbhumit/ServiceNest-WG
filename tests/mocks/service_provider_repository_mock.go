// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\bjain\serviceNest\interfaces\service_provider_repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "serviceNest/model"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceProviderRepository is a mock of ServiceProviderRepository interface.
type MockServiceProviderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProviderRepositoryMockRecorder
}

// MockServiceProviderRepositoryMockRecorder is the mock recorder for MockServiceProviderRepository.
type MockServiceProviderRepositoryMockRecorder struct {
	mock *MockServiceProviderRepository
}

// NewMockServiceProviderRepository creates a new mock instance.
func NewMockServiceProviderRepository(ctrl *gomock.Controller) *MockServiceProviderRepository {
	mock := &MockServiceProviderRepository{ctrl: ctrl}
	mock.recorder = &MockServiceProviderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceProviderRepository) EXPECT() *MockServiceProviderRepositoryMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *MockServiceProviderRepository) AddReview(review model.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockServiceProviderRepositoryMockRecorder) AddReview(review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockServiceProviderRepository)(nil).AddReview), review)
}

// GetProviderByID mocks base method.
func (m *MockServiceProviderRepository) GetProviderByID(providerID string) (*model.ServiceProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderByID", providerID)
	ret0, _ := ret[0].(*model.ServiceProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByID indicates an expected call of GetProviderByID.
func (mr *MockServiceProviderRepositoryMockRecorder) GetProviderByID(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByID", reflect.TypeOf((*MockServiceProviderRepository)(nil).GetProviderByID), providerID)
}

// GetProviderByServiceID mocks base method.
func (m *MockServiceProviderRepository) GetProviderByServiceID(serviceID string) (*model.ServiceProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderByServiceID", serviceID)
	ret0, _ := ret[0].(*model.ServiceProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderByServiceID indicates an expected call of GetProviderByServiceID.
func (mr *MockServiceProviderRepositoryMockRecorder) GetProviderByServiceID(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderByServiceID", reflect.TypeOf((*MockServiceProviderRepository)(nil).GetProviderByServiceID), serviceID)
}

// GetProviderDetailByID mocks base method.
func (m *MockServiceProviderRepository) GetProviderDetailByID(providerID string) (*model.ServiceProviderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderDetailByID", providerID)
	ret0, _ := ret[0].(*model.ServiceProviderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderDetailByID indicates an expected call of GetProviderDetailByID.
func (mr *MockServiceProviderRepositoryMockRecorder) GetProviderDetailByID(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderDetailByID", reflect.TypeOf((*MockServiceProviderRepository)(nil).GetProviderDetailByID), providerID)
}

// GetProvidersByServiceType mocks base method.
func (m *MockServiceProviderRepository) GetProvidersByServiceType(serviceType string) ([]model.ServiceProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvidersByServiceType", serviceType)
	ret0, _ := ret[0].([]model.ServiceProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvidersByServiceType indicates an expected call of GetProvidersByServiceType.
func (mr *MockServiceProviderRepositoryMockRecorder) GetProvidersByServiceType(serviceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvidersByServiceType", reflect.TypeOf((*MockServiceProviderRepository)(nil).GetProvidersByServiceType), serviceType)
}

// GetReviewsByProviderID mocks base method.
func (m *MockServiceProviderRepository) GetReviewsByProviderID(providerID string) ([]model.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByProviderID", providerID)
	ret0, _ := ret[0].([]model.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByProviderID indicates an expected call of GetReviewsByProviderID.
func (mr *MockServiceProviderRepositoryMockRecorder) GetReviewsByProviderID(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByProviderID", reflect.TypeOf((*MockServiceProviderRepository)(nil).GetReviewsByProviderID), providerID)
}

// IsProviderApproved mocks base method.
func (m *MockServiceProviderRepository) IsProviderApproved(providerID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProviderApproved", providerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProviderApproved indicates an expected call of IsProviderApproved.
func (mr *MockServiceProviderRepositoryMockRecorder) IsProviderApproved(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProviderApproved", reflect.TypeOf((*MockServiceProviderRepository)(nil).IsProviderApproved), providerID)
}

// SaveServiceProvider mocks base method.
func (m *MockServiceProviderRepository) SaveServiceProvider(provider model.ServiceProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveServiceProvider", provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveServiceProvider indicates an expected call of SaveServiceProvider.
func (mr *MockServiceProviderRepositoryMockRecorder) SaveServiceProvider(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveServiceProvider", reflect.TypeOf((*MockServiceProviderRepository)(nil).SaveServiceProvider), provider)
}

// SaveServiceProviderDetail mocks base method.
func (m *MockServiceProviderRepository) SaveServiceProviderDetail(provider *model.ServiceProviderDetails, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveServiceProviderDetail", provider, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveServiceProviderDetail indicates an expected call of SaveServiceProviderDetail.
func (mr *MockServiceProviderRepositoryMockRecorder) SaveServiceProviderDetail(provider, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveServiceProviderDetail", reflect.TypeOf((*MockServiceProviderRepository)(nil).SaveServiceProviderDetail), provider, requestID)
}

// UpdateProviderRating mocks base method.
func (m *MockServiceProviderRepository) UpdateProviderRating(providerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProviderRating", providerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProviderRating indicates an expected call of UpdateProviderRating.
func (mr *MockServiceProviderRepositoryMockRecorder) UpdateProviderRating(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProviderRating", reflect.TypeOf((*MockServiceProviderRepository)(nil).UpdateProviderRating), providerID)
}

// UpdateServiceProvider mocks base method.
func (m *MockServiceProviderRepository) UpdateServiceProvider(provider *model.ServiceProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceProvider", provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceProvider indicates an expected call of UpdateServiceProvider.
func (mr *MockServiceProviderRepositoryMockRecorder) UpdateServiceProvider(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceProvider", reflect.TypeOf((*MockServiceProviderRepository)(nil).UpdateServiceProvider), provider)
}

// UpdateServiceProviderDetailByRequestID mocks base method.
func (m *MockServiceProviderRepository) UpdateServiceProviderDetailByRequestID(provider *model.ServiceProviderDetails, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceProviderDetailByRequestID", provider, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceProviderDetailByRequestID indicates an expected call of UpdateServiceProviderDetailByRequestID.
func (mr *MockServiceProviderRepositoryMockRecorder) UpdateServiceProviderDetailByRequestID(provider, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceProviderDetailByRequestID", reflect.TypeOf((*MockServiceProviderRepository)(nil).UpdateServiceProviderDetailByRequestID), provider, requestID)
}
