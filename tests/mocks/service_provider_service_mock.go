// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\bjain\serviceNest\interfaces\service_provider_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "serviceNest/model"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceProviderService is a mock of ServiceProviderService interface.
type MockServiceProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProviderServiceMockRecorder
}

// MockServiceProviderServiceMockRecorder is the mock recorder for MockServiceProviderService.
type MockServiceProviderServiceMockRecorder struct {
	mock *MockServiceProviderService
}

// NewMockServiceProviderService creates a new mock instance.
func NewMockServiceProviderService(ctrl *gomock.Controller) *MockServiceProviderService {
	mock := &MockServiceProviderService{ctrl: ctrl}
	mock.recorder = &MockServiceProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceProviderService) EXPECT() *MockServiceProviderServiceMockRecorder {
	return m.recorder
}

// AcceptServiceRequest mocks base method.
func (m *MockServiceProviderService) AcceptServiceRequest(providerID, requestID, estimatedPrice string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptServiceRequest", providerID, requestID, estimatedPrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptServiceRequest indicates an expected call of AcceptServiceRequest.
func (mr *MockServiceProviderServiceMockRecorder) AcceptServiceRequest(providerID, requestID, estimatedPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptServiceRequest", reflect.TypeOf((*MockServiceProviderService)(nil).AcceptServiceRequest), providerID, requestID, estimatedPrice)
}

// AddService mocks base method.
func (m *MockServiceProviderService) AddService(providerID string, newService model.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", providerID, newService)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddService indicates an expected call of AddService.
func (mr *MockServiceProviderServiceMockRecorder) AddService(providerID, newService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockServiceProviderService)(nil).AddService), providerID, newService)
}

// DeclineServiceRequest mocks base method.
func (m *MockServiceProviderService) DeclineServiceRequest(providerID, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineServiceRequest", providerID, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineServiceRequest indicates an expected call of DeclineServiceRequest.
func (mr *MockServiceProviderServiceMockRecorder) DeclineServiceRequest(providerID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineServiceRequest", reflect.TypeOf((*MockServiceProviderService)(nil).DeclineServiceRequest), providerID, requestID)
}

// GetAllServiceRequests mocks base method.
func (m *MockServiceProviderService) GetAllServiceRequests() ([]model.ServiceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServiceRequests")
	ret0, _ := ret[0].([]model.ServiceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServiceRequests indicates an expected call of GetAllServiceRequests.
func (mr *MockServiceProviderServiceMockRecorder) GetAllServiceRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServiceRequests", reflect.TypeOf((*MockServiceProviderService)(nil).GetAllServiceRequests))
}

// GetReviews mocks base method.
func (m *MockServiceProviderService) GetReviews(providerID string) ([]model.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviews", providerID)
	ret0, _ := ret[0].([]model.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviews indicates an expected call of GetReviews.
func (mr *MockServiceProviderServiceMockRecorder) GetReviews(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockServiceProviderService)(nil).GetReviews), providerID)
}

// GetServiceByID mocks base method.
func (m *MockServiceProviderService) GetServiceByID(serviceID string) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByID", serviceID)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByID indicates an expected call of GetServiceByID.
func (mr *MockServiceProviderServiceMockRecorder) GetServiceByID(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByID", reflect.TypeOf((*MockServiceProviderService)(nil).GetServiceByID), serviceID)
}

// GetServiceRequestByID mocks base method.
func (m *MockServiceProviderService) GetServiceRequestByID(requestID string) (*model.ServiceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceRequestByID", requestID)
	ret0, _ := ret[0].(*model.ServiceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceRequestByID indicates an expected call of GetServiceRequestByID.
func (mr *MockServiceProviderServiceMockRecorder) GetServiceRequestByID(requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceRequestByID", reflect.TypeOf((*MockServiceProviderService)(nil).GetServiceRequestByID), requestID)
}

// RemoveService mocks base method.
func (m *MockServiceProviderService) RemoveService(providerID, serviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveService", providerID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveService indicates an expected call of RemoveService.
func (mr *MockServiceProviderServiceMockRecorder) RemoveService(providerID, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveService", reflect.TypeOf((*MockServiceProviderService)(nil).RemoveService), providerID, serviceID)
}

// UpdateAvailability mocks base method.
func (m *MockServiceProviderService) UpdateAvailability(providerID string, availability bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvailability", providerID, availability)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvailability indicates an expected call of UpdateAvailability.
func (mr *MockServiceProviderServiceMockRecorder) UpdateAvailability(providerID, availability interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvailability", reflect.TypeOf((*MockServiceProviderService)(nil).UpdateAvailability), providerID, availability)
}

// UpdateService mocks base method.
func (m *MockServiceProviderService) UpdateService(providerID, serviceID string, updatedService model.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", providerID, serviceID, updatedService)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockServiceProviderServiceMockRecorder) UpdateService(providerID, serviceID, updatedService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockServiceProviderService)(nil).UpdateService), providerID, serviceID, updatedService)
}

// ViewApprovedRequestsByProvider mocks base method.
func (m *MockServiceProviderService) ViewApprovedRequestsByProvider(providerID string) ([]model.ServiceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewApprovedRequestsByProvider", providerID)
	ret0, _ := ret[0].([]model.ServiceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewApprovedRequestsByProvider indicates an expected call of ViewApprovedRequestsByProvider.
func (mr *MockServiceProviderServiceMockRecorder) ViewApprovedRequestsByProvider(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewApprovedRequestsByProvider", reflect.TypeOf((*MockServiceProviderService)(nil).ViewApprovedRequestsByProvider), providerID)
}

// ViewServices mocks base method.
func (m *MockServiceProviderService) ViewServices(providerID string) ([]model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewServices", providerID)
	ret0, _ := ret[0].([]model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewServices indicates an expected call of ViewServices.
func (mr *MockServiceProviderServiceMockRecorder) ViewServices(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewServices", reflect.TypeOf((*MockServiceProviderService)(nil).ViewServices), providerID)
}
